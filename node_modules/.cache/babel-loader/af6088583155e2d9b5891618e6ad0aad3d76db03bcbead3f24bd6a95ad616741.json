{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tsand\\\\lou\\\\src\\\\LouDocCom\\\\LouDocForm.jsx\",\n  _s = $RefreshSig$();\n// src/components/DocumentSubmissionForm.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LouDocForm = ({\n  onSubmit\n}) => {\n  _s();\n  const [document, setDocument] = useState(null);\n  const [error, setError] = useState(null);\n  const [termsAgreed, setTermsAgreed] = useState(false);\n  const allowedFileTypes = ['pdf', 'doc', 'docx']; // Add or modify allowed file types\n  const maxFileSizeInBytes = 5 * 1024 * 1024; // 5 MB\n\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      if (file.size > maxFileSizeInBytes) {\n        setError(`File size exceeds the limit of ${maxFileSizeInBytes / (1024 * 1024)} MB`);\n        setDocument(null);\n      } else if (!allowedFileTypes.includes(file.name.split('.').pop().toLowerCase())) {\n        setError(`Invalid file format. Supported formats: ${allowedFileTypes.join(', ')}`);\n        setDocument(null);\n      } else {\n        setDocument(file);\n        setError(null);\n      }\n    }\n  };\n  const handleTermsAgree = agreed => {\n    setTermsAgreed(agreed);\n    // Reset the file input if the user unchecks the terms\n    if (!agreed) {\n      setDocument(null);\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (document && termsAgreed) {\n      onSubmit(document);\n    } else if (!termsAgreed) {\n      setError('Please agree to the terms and conditions before submitting.');\n    } else {\n      setError('Please select a valid document file.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Select Document:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: allowedFileTypes.join(','),\n        disabled: !termsAgreed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: termsAgreed,\n          onChange: e => handleTermsAgree(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), \"I agree to the terms and conditions\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !document || !termsAgreed,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(LouDocForm, \"vZdsUHYDnD04DHaO5cy/B8cjOd0=\");\n_c = LouDocForm;\nexport default LouDocForm;\nvar _c;\n$RefreshReg$(_c, \"LouDocForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","LouDocForm","onSubmit","_s","document","setDocument","error","setError","termsAgreed","setTermsAgreed","allowedFileTypes","maxFileSizeInBytes","handleFileChange","e","file","target","files","size","includes","name","split","pop","toLowerCase","join","handleTermsAgree","agreed","handleSubmit","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","accept","disabled","checked","className","_c","$RefreshReg$"],"sources":["C:/Users/tsand/lou/src/LouDocCom/LouDocForm.jsx"],"sourcesContent":["// src/components/DocumentSubmissionForm.js\r\nimport React, { useState } from 'react';\r\n\r\nconst LouDocForm = ({ onSubmit }) => {\r\n  const [document, setDocument] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [termsAgreed, setTermsAgreed] = useState(false);\r\n\r\n  const allowedFileTypes = ['pdf', 'doc', 'docx']; // Add or modify allowed file types\r\n  const maxFileSizeInBytes = 5 * 1024 * 1024; // 5 MB\r\n\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n    if (file) {\r\n      if (file.size > maxFileSizeInBytes) {\r\n        setError(`File size exceeds the limit of ${maxFileSizeInBytes / (1024 * 1024)} MB`);\r\n        setDocument(null);\r\n      } else if (!allowedFileTypes.includes(file.name.split('.').pop().toLowerCase())) {\r\n        setError(`Invalid file format. Supported formats: ${allowedFileTypes.join(', ')}`);\r\n        setDocument(null);\r\n      } else {\r\n        setDocument(file);\r\n        setError(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTermsAgree = (agreed) => {\r\n    setTermsAgreed(agreed);\r\n    // Reset the file input if the user unchecks the terms\r\n    if (!agreed) {\r\n      setDocument(null);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (document && termsAgreed) {\r\n      onSubmit(document);\r\n    } else if (!termsAgreed) {\r\n      setError('Please agree to the terms and conditions before submitting.');\r\n    } else {\r\n      setError('Please select a valid document file.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        <h2>Select Document:</h2>\r\n        <input\r\n          type=\"file\"\r\n          onChange={handleFileChange}\r\n          accept={allowedFileTypes.join(',')}\r\n          disabled={!termsAgreed}\r\n        />\r\n      </label>\r\n      <div>\r\n        <label>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={termsAgreed}\r\n            onChange={(e) => handleTermsAgree(e.target.checked)}\r\n          />\r\n          I agree to the terms and conditions\r\n        </label>\r\n      </div><br></br>\r\n      {error && <div className=\"error\">{error}</div>}\r\n      \r\n      <button type=\"submit\" disabled={!document || !termsAgreed}>\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LouDocForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}